// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zzell/fanout/internal/mq (interfaces: MQ)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMQ is a mock of MQ interface.
type MockMQ struct {
	ctrl     *gomock.Controller
	recorder *MockMQMockRecorder
}

// MockMQMockRecorder is the mock recorder for MockMQ.
type MockMQMockRecorder struct {
	mock *MockMQ
}

// NewMockMQ creates a new mock instance.
func NewMockMQ(ctrl *gomock.Controller) *MockMQ {
	mock := &MockMQ{ctrl: ctrl}
	mock.recorder = &MockMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQ) EXPECT() *MockMQMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMQ) Publish(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMQMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMQ)(nil).Publish), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockMQ) Subscribe(arg0 string, arg1 func([]byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockMQMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMQ)(nil).Subscribe), arg0, arg1)
}
